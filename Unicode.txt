
' Copyright (c) 2016 StarBrilliant <m13253@hotmail.com>
' All rights reserved.
'
' Redistribution and use in source and binary forms are permitted
' provided that the above copyright notice and this paragraph are
' duplicated in all such forms and that any documentation,
' advertising materials, and other materials related to such
' distribution and use acknowledge that the software was developed by
' StarBrilliant.
' The name of StarBrilliant may not be used to endorse or promote
' products derived from this software without specific prior written
' permission.
'
' THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
' IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
' WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

.版本 2

.程序集 Unicode, , , 一个进行 Unicode 相关字符串转换的易语言库。本库以 BSD 协议发布，参见随附的 LICENSE.txt 文件。

.子程序 码位UTF8, 字节集, 公开, 给定整数型 Unicode 码位，返回对应的 UTF-8 序列。
.参数 码位, 整数型
.局部变量 结果, 字节集

.判断开始 (码位 ＜ 十六进制 (“80”))
    结果 ＝ { 0 }
    结果 [1] ＝ 码位
.判断 (码位 ＜ 十六进制 (“800”))
    结果 ＝ { 0, 0 }
    结果 [1] ＝ 位或 (右移 (码位, 6), 十六进制 (“c0”))
    结果 [2] ＝ 位或 (位与 (码位, 十六进制 (“3f”)), 十六进制 (“80”))
.判断 (码位 ＜ 十六进制 (“10000”))
    .如果 (位与 (码位, 十六进制 (“f800”)) ≠ 十六进制 (“d800”))
        结果 ＝ { 0, 0, 0 }
        结果 [1] ＝ 位或 (右移 (码位, 12), 十六进制 (“e0”))
        结果 [2] ＝ 位或 (位与 (右移 (码位, 6), 十六进制 (“3f”)), 十六进制 (“80”))
        结果 [3] ＝ 位或 (位与 (码位, 十六进制 (“3f”)), 十六进制 (“80”))
    .否则
        结果 ＝ { 239, 191, 189 }
    .如果结束

.判断 (码位 ＜ 十六进制 (“110000”))
    结果 ＝ { 0, 0, 0, 0 }
    结果 [1] ＝ 位或 (右移 (码位, 18), 十六进制 (“f0”))
    结果 [2] ＝ 位或 (位与 (右移 (码位, 12), 十六进制 (“3f”)), 十六进制 (“80”))
    结果 [3] ＝ 位或 (位与 (右移 (码位, 6), 十六进制 (“3f”)), 十六进制 (“80”))
    结果 [4] ＝ 位或 (位与 (码位, 十六进制 (“3f”)), 十六进制 (“80”))
.默认
    结果 ＝ { 239, 191, 189 }
.判断结束
返回 (结果)

.子程序 码位UTF16, 字节集, 公开, 给定整数型 Unicode 码位，返回对应的 UTF-16 序列。
.参数 码位, 整数型
.局部变量 结果, 字节集
.局部变量 前导, 整数型
.局部变量 尾随, 整数型

.如果 (码位 ＜ 十六进制 (“10000”))
    结果 ＝ { 0, 0 }
    结果 [1] ＝ 位与 (码位, 十六进制 (“ff”))
    结果 [2] ＝ 右移 (码位, 8)
.否则
    结果 ＝ { 0, 0, 0, 0 }
    码位 ＝ 码位 － 十六进制 (“10000”)
    前导 ＝ 位或 (右移 (码位, 10), 十六进制 (“d800”))
    尾随 ＝ 位或 (位与 (码位, 十六进制 (“3ff”)), 十六进制 (“dc00”))
    结果 [1] ＝ 右移 (前导, 8)
    结果 [2] ＝ 位与 (前导, 十六进制 (“ff”))
    结果 [3] ＝ 右移 (尾随, 8)
    结果 [4] ＝ 右移 (尾随, 十六进制 (“ff”))
.如果结束
返回 (结果)

.子程序 检查尾随UTF8, 逻辑型
.参数 序列, 字节集
.参数 索引, 整数型
.参数 长度, 整数型

.如果 (索引 ＋ 长度 ≤ 取字节集长度 (序列))
    .判断循环首 (长度 ≠ 0)
        长度 ＝ 长度 － 1
        索引 ＝ 索引 ＋ 1
        .如果真 (位与 (序列 [索引], 十六进制 (“c0”)) ≠ 十六进制 (“80”))
            返回 (假)
        .如果真结束

    .判断循环尾 ()
    返回 (真)
.否则
    返回 (假)
.如果结束


.子程序 序号UTF8, 整数型, 公开, 给定 UTF-8 序列，返回对应的整数型 Unicode 码位。
.参数 序列, 字节集
.参数 索引, 整数型, 参考, 从索引处开始，在读入一个码位后指向下一个码位的开始。
.局部变量 前导, 整数型
.局部变量 结果, 整数型

.如果真 (索引 ＞ 取字节集长度 (序列))
    索引 ＝ 取字节集长度 (序列) ＋ 1
    返回 (0)
.如果真结束
前导 ＝ 位与 (到整数 (序列 [索引]), 十六进制 (“ff”))
.判断开始 (前导 ＜ 十六进制 (“80”))
    索引 ＝ 索引 ＋ 1
    返回 (前导)
.判断 (前导 ＜ 十六进制 (“c0”))
    索引 ＝ 索引 ＋ 1
    返回 (十六进制 (“fffd”))
.判断 (前导 ＜ 十六进制 (“e0”))
    .如果真 (检查尾随UTF8 (序列, 索引, 1))
        结果 ＝ 位或 (左移 (位与 (前导, 十六进制 (“1f”)), 6), 位与 (到整数 (序列 [索引 ＋ 1]), 十六进制 (“3f”)))
        .如果真 (结果 ≥ 128)
            索引 ＝ 索引 ＋ 2
            返回 (结果)
        .如果真结束

    .如果真结束
    索引 ＝ 索引 ＋ 1
    返回 (十六进制 (“fffd”))
.判断 (前导 ＜ 十六进制 (“f0”))
    .如果真 (检查尾随UTF8 (序列, 索引, 2))
        结果 ＝ 位或 (左移 (位与 (前导, 十六进制 (“f”)), 12), 左移 (位与 (到整数 (序列 [索引 ＋ 1]), 十六进制 (“3f”)), 6), 位与 (到整数 (序列 [索引 ＋ 2]), 十六进制 (“3f”)))
        .如果真 (结果 ≥ 十六进制 (“800”) 且 位与 (结果, 十六进制 (“f800”)) ≠ 十六进制 (“d800”))
            索引 ＝ 索引 ＋ 3
            返回 (结果)
        .如果真结束

    .如果真结束
    索引 ＝ 索引 ＋ 1
    返回 (十六进制 (“fffd”))
.判断 (前导 ＜ 十六进制 (“f8”))
    .如果真 (检查尾随UTF8 (序列, 索引, 3))
        结果 ＝ 位或 (左移 (位与 (前导, 十六进制 (“7”)), 18), 左移 (位与 (到整数 (序列 [索引 ＋ 1]), 十六进制 (“3f”)), 12), 左移 (位与 (到整数 (序列 [索引 ＋ 2]), 十六进制 (“3f”)), 6), 位与 (到整数 (序列 [索引 ＋ 3]), 十六进制 (“3f”)))
        .如果真 (结果 ≥ 十六进制 (“10000”) 且 结果 ＜ 十六进制 (“110000”))
            索引 ＝ 索引 ＋ 4
            返回 (结果)
        .如果真结束

    .如果真结束
    索引 ＝ 索引 ＋ 1
    返回 (十六进制 (“fffd”))
.默认
    索引 ＝ 索引 ＋ 1
    返回 (十六进制 (“fffd”))
.判断结束


.子程序 序号UTF16, 整数型, 公开, 给定 UTF-16 序列，返回对应的整数型 Unicode 码位。
.参数 序列, 字节集
.参数 索引, 整数型, 参考, 从索引处开始，在读入一个码位后指向下一个码位的开始。
.局部变量 前导, 整数型
.局部变量 尾随, 整数型

.如果真 (索引 ＋ 1 ＞ 取字节集长度 (序列))
    索引 ＝ 取字节集长度 (序列) ＋ 1
    返回 (0)
.如果真结束
前导 ＝ 位与 (合并短整数 (序列 [索引], 序列 [索引 ＋ 1]), 十六进制 (“ffff”))
.判断开始 (位与 (前导, 十六进制 (“f800”)) ≠ 十六进制 (“d800”))
    索引 ＝ 索引 ＋ 2
    返回 (前导)
.判断 (索引 ＋ 3 ≤ 取字节集长度 (序列) 且 位与 (前导, 十六进制 (“fc00”)) ＝ 十六进制 (“d800”))
    尾随 ＝ 位与 (合并短整数 (序列 [索引 ＋ 2], 序列 [索引 ＋ 3]), 十六进制 (“ffff”))
    .如果 (位与 (前导, 十六进制 (“fc00”)) ＝ 十六进制 (“dc00”))
        索引 ＝ 索引 ＋ 4
        返回 (位或 (左移 (位与 (前导, 十六进制 (“3ff”)), 10), 位与 (尾随, 十六进制 (“3ff”))) ＋ 十六进制 (“10000”))
    .否则
        索引 ＝ 索引 ＋ 2
        返回 (十六进制 (“fffd”))
    .如果结束

.默认
    索引 ＝ 索引 ＋ 2
    返回 (十六进制 (“fffd”))
.判断结束


.子程序 UTF8转UTF16, 字节集, 公开, 给定 UTF-8 序列，返回对应的 UTF-16 序列。
.参数 UTF8, 字节集
.局部变量 索引, 整数型
.局部变量 序号, 整数型
.局部变量 结果, 字节集

索引 ＝ 1
结果 ＝ {  }
.判断循环首 (索引 ≤ 取字节集长度 (UTF8))
    序号 ＝ 序号UTF8 (UTF8, 索引)
    结果 ＝ 结果 ＋ 码位UTF16 (序号)
.判断循环尾 ()
返回 (结果)

.子程序 UTF16转UTF8, 字节集, 公开, 给定 UTF-16 序列，返回对应的 UTF-8 序列。
.参数 UTF16, 字节集
.局部变量 索引, 整数型
.局部变量 序号, 整数型
.局部变量 结果, 字节集

索引 ＝ 1
结果 ＝ {  }
.判断循环首 (索引 ≤ 取字节集长度 (UTF16))
    序号 ＝ 序号UTF16 (UTF16, 索引)
    结果 ＝ 结果 ＋ 码位UTF8 (序号)
.判断循环尾 ()
返回 (结果)

.子程序 ANSI转UTF16, 字节集, 公开, 给定当前语言环境的 ANSI 序列（通常是 GBK 编码），返回对应的 UTF-16 序列。
.参数 ANSI, 文本型
.局部变量 ANSI长度, 整数型
.局部变量 UTF16长度, 整数型
.局部变量 结果, 字节集

ANSI长度 ＝ 取文本长度 (ANSI)
UTF16长度 ＝ MultiByteToWideChar (0, 0, ANSI, ANSI长度, 结果, 0)
结果 ＝ 取空白字节集 (UTF16长度 × 2)
UTF16长度 ＝ MultiByteToWideChar (0, 0, ANSI, ANSI长度, 结果, UTF16长度)
结果 ＝ 取字节集左边 (结果, UTF16长度 × 2)
返回 (结果)

.子程序 UTF16转ANSI, 文本型, 公开, 给定 UTF-16 序列，返回当前语言环境对应的 ANSI 序列（通常是 GBK 编码）。
.参数 UTF16, 字节集
.局部变量 UTF16长度, 整数型
.局部变量 ANSI长度, 整数型
.局部变量 结果, 字节集

UTF16长度 ＝ 取字节集长度 (UTF16) ÷ 2
ANSI长度 ＝ WideCharToMultiByte (0, 0, UTF16, UTF16长度, 结果, 0, 0, 0)
结果 ＝ 取空白字节集 (ANSI长度)
WideCharToMultiByte (0, 0, UTF16, UTF16长度, 结果, ANSI长度, 0, 0)
返回 (到文本 (结果))

.子程序 字节集加零, 字节集, 公开, 给定 UTF-16 序列，在末尾追加 L'\u0000'，用于提供给 Win32 API。
.参数 序列, 字节集

返回 (序列 ＋ { 0, 0 })

.子程序 _启动子程序, 整数型, , 请在本子程序中放置易模块初始化代码

返回 (0)

.DLL命令 MessageBoxW, 整数型, "User32.dll", "MessageBoxW", 公开
    .参数 hWnd, 整数型
    .参数 lpMessage, 字节集
    .参数 lpCaptain, 字节集
    .参数 uType, 整数型

.DLL命令 MultiByteToWideChar, 整数型, "Kernel32.dll", "MultiByteToWideChar"
    .参数 CodePage, 整数型
    .参数 dwFlags, 整数型
    .参数 lpMultiByteStr, 文本型
    .参数 cbMultiByte, 整数型
    .参数 lpWideCharStr, 字节集, 传址
    .参数 cchWideChar, 整数型

.DLL命令 WideCharToMultiByte, 整数型, "Kernel32.dll", "WideCharToMultiByte"
    .参数 CodePage, 整数型
    .参数 dwFlags, 整数型
    .参数 lpWideCharStr, 字节集
    .参数 cchWideChar, 整数型
    .参数 lpMultiByteStr, 字节集, 传址
    .参数 cbMultiByte, 整数型
    .参数 lpDefaultChar, 整数型
    .参数 lpUsedDefaultChar, 整数型
